library(ggplot2)
library(reshape2)
library(cyrils)
library(casal)
setwd("../CASAL")
cas = extract.mpd("run.log")
cas_dq = cas$quantities$SSBs
setwd("../Casal2")
library(casal2)
cas2 = extract.mpd("run.log")
cas2_dq = plot.derived_quantities(cas2, report_label = "derived_quants", plot.it = F)
## compare CASAL with Casal2
years = rownames(cas2_dq)
par(mfrow = c(1,3))
plot(years, cas2_dq[,"SSB_EN"], xlab = "years", ylab = "SSB (t)", main = "EN", type = "l", lwd = 2, ylim = c(0,200000))
lines(years, cas_dq$EN, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_HG"], xlab = "years", ylab = "SSB (t)", main = "HG", type = "l", lwd = 2, ylim = c(0,150000))
lines(years, cas_dq$HAGU, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_BP"], xlab = "years", ylab = "SSB (t)", main = "BP", type = "l", lwd = 2, ylim = c(0,60000))
lines(years, cas_dq$BOP, lwd = 2, col = "red",lty = 2)
detach("package:casal2", unload=TRUE)
detach("package:ibm", unload=TRUE)
## this script is just comparing, steady state models just constant recruitment and M
library(ggplot2)
library(reshape2)
library(cyrils)
library(casal)
setwd("../CASAL")
cas = extract.mpd("run.log")
cas_dq = cas$quantities$SSBs
setwd("../Casal2")
library(casal2)
cas2 = extract.mpd("run.log")
cas2_dq = plot.derived_quantities(cas2, report_label = "derived_quants", plot.it = F)
## compare CASAL with Casal2
years = rownames(cas2_dq)
par(mfrow = c(1,3))
plot(years, cas2_dq[,"SSB_EN"], xlab = "years", ylab = "SSB (t)", main = "EN", type = "l", lwd = 2, ylim = c(0,200000))
lines(years, cas_dq$EN, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_HG"], xlab = "years", ylab = "SSB (t)", main = "HG", type = "l", lwd = 2, ylim = c(0,150000))
lines(years, cas_dq$HAGU, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_BP"], xlab = "years", ylab = "SSB (t)", main = "BP", type = "l", lwd = 2, ylim = c(0,60000))
lines(years, cas_dq$BOP, lwd = 2, col = "red",lty = 2)
## lets look at B0
cas$quantities$R0
c(cas2$Rec_EN$`1`$r0, cas2$Rec_HG$`1`$r0,cas2$Rec_BP$`1`$r0)
## lets look at F
rbind(cas$quantities$fishing_pressures$BP_LL,cas2$instantaneous_mort$`1`$`fishing_pressure[BP_LL]`)
rbind(cas$quantities$actual_catches$BP_LL,cas2$instantaneous_mort$`1`$`actual_catch[BP_LL]`)
rbind(cas$quantities$actual_catches$HG_LL,cas2$instantaneous_mort$`1`$`actual_catch[HG_LL]`)
rbind(cas$quantities$fishing_pressures$HG_LL,cas2$instantaneous_mort$`1`$`fishing_pressure[HG_LL]`)
rbind(cas$quantities$actual_catches$EN_LL,cas2$instantaneous_mort$`1`$`actual_catch[EN_LL]`)
rbind(cas$quantities$fishing_pressures$EN_LL,cas2$instantaneous_mort$`1`$`fishing_pressure[EN_LL]`)
cbind(cas$quantities$`Ogive parameter values`$`selectivity[Sel_LL].all`, cas2$Sel_LL$`1`$Values)
rbind(cas$quantities$fishing_pressures$HG_LL,cas2$instantaneous_mort$`1`$`fishing_pressure[HG_LL]`)
rbind(cas$quantities$actual_catches$BP_LL,cas2$instantaneous_mort$`1`$`actual_catch[BP_LL]`)
getwd()
detach("package:casal2", unload=TRUE)
detach("package:ibm", unload=TRUE)
## this script is just comparing, steady state models just constant recruitment and M
library(ggplot2)
library(reshape2)
library(cyrils)
library(casal)
setwd("../CASAL")
cas = extract.mpd("run.log")
cas_dq = cas$quantities$SSBs
setwd("../Casal2")
library(casal2)
cas2 = extract.mpd("run.log")
cas2_dq = plot.derived_quantities(cas2, report_label = "derived_quants", plot.it = F)
## compare CASAL with Casal2
years = rownames(cas2_dq)
par(mfrow = c(1,3))
plot(years, cas2_dq[,"SSB_EN"], xlab = "years", ylab = "SSB (t)", main = "EN", type = "l", lwd = 2, ylim = c(0,200000))
lines(years, cas_dq$EN, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_HG"], xlab = "years", ylab = "SSB (t)", main = "HG", type = "l", lwd = 2, ylim = c(0,150000))
lines(years, cas_dq$HAGU, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_BP"], xlab = "years", ylab = "SSB (t)", main = "BP", type = "l", lwd = 2, ylim = c(0,60000))
lines(years, cas_dq$BOP, lwd = 2, col = "red",lty = 2)
detach("package:casal2", unload=TRUE)
detach("package:ibm", unload=TRUE)
## this script is just comparing, steady state models just constant recruitment and M
library(ggplot2)
library(reshape2)
library(cyrils)
library(casal)
setwd("../CASAL")
cas = extract.mpd("run.log")
cas_dq = cas$quantities$SSBs
setwd("../Casal2")
library(casal2)
cas2 = extract.mpd("run.log")
cas2_dq = plot.derived_quantities(cas2, report_label = "derived_quants", plot.it = F)
## compare CASAL with Casal2
years = rownames(cas2_dq)
par(mfrow = c(1,3))
plot(years, cas2_dq[,"SSB_EN"], xlab = "years", ylab = "SSB (t)", main = "EN", type = "l", lwd = 2, ylim = c(0,200000))
lines(years, cas_dq$EN, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_HG"], xlab = "years", ylab = "SSB (t)", main = "HG", type = "l", lwd = 2, ylim = c(0,150000))
lines(years, cas_dq$HAGU, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_BP"], xlab = "years", ylab = "SSB (t)", main = "BP", type = "l", lwd = 2, ylim = c(0,60000))
lines(years, cas_dq$BOP, lwd = 2, col = "red",lty = 2)
detach("package:casal2", unload=TRUE)
detach("package:ibm", unload=TRUE)
## this script is just comparing, steady state models just constant recruitment and M
library(ggplot2)
library(reshape2)
library(cyrils)
library(casal)
setwd("../CASAL")
cas = extract.mpd("run.log")
cas_dq = cas$quantities$SSBs
setwd("../Casal2")
library(casal2)
cas2 = extract.mpd("run.log")
cas2_dq = plot.derived_quantities(cas2, report_label = "derived_quants", plot.it = F)
## compare CASAL with Casal2
years = rownames(cas2_dq)
par(mfrow = c(1,3))
plot(years, cas2_dq[,"SSB_EN"], xlab = "years", ylab = "SSB (t)", main = "EN", type = "l", lwd = 2, ylim = c(0,200000))
lines(years, cas_dq$EN, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_HG"], xlab = "years", ylab = "SSB (t)", main = "HG", type = "l", lwd = 2, ylim = c(0,150000))
lines(years, cas_dq$HAGU, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_BP"], xlab = "years", ylab = "SSB (t)", main = "BP", type = "l", lwd = 2, ylim = c(0,60000))
lines(years, cas_dq$BOP, lwd = 2, col = "red",lty = 2)
# Read in Casal2 output
detach("package:casal2", unload=TRUE)
detach("package:ibm", unload=TRUE)
## this script is just comparing, steady state models just constant recruitment and M
library(ggplot2)
library(reshape2)
library(cyrils)
library(casal)
setwd("../CASAL")
cas = extract.mpd("run.log")
cas_dq = cas$quantities$SSBs
setwd("../Casal2")
library(casal2)
cas2 = extract.mpd("run.log")
cas2_dq = plot.derived_quantities(cas2, report_label = "derived_quants", plot.it = F)
## compare CASAL with Casal2
years = rownames(cas2_dq)
par(mfrow = c(1,3))
plot(years, cas2_dq[,"SSB_EN"], xlab = "years", ylab = "SSB (t)", main = "EN", type = "l", lwd = 2, ylim = c(0,200000))
lines(years, cas_dq$EN, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_HG"], xlab = "years", ylab = "SSB (t)", main = "HG", type = "l", lwd = 2, ylim = c(0,150000))
lines(years, cas_dq$HAGU, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_BP"], xlab = "years", ylab = "SSB (t)", main = "BP", type = "l", lwd = 2, ylim = c(0,60000))
lines(years, cas_dq$BOP, lwd = 2, col = "red",lty = 2)
# Read in Casal2 output
detach("package:casal2", unload=TRUE)
detach("package:ibm", unload=TRUE)
## this script is just comparing, steady state models just constant recruitment and M
library(ggplot2)
library(reshape2)
library(cyrils)
library(casal)
setwd("../CASAL")
cas = extract.mpd("run.log")
cas_dq = cas$quantities$SSBs
setwd("../Casal2")
library(casal2)
cas2 = extract.mpd("run.log")
cas2_dq = plot.derived_quantities(cas2, report_label = "derived_quants", plot.it = F)
## compare CASAL with Casal2
years = rownames(cas2_dq)
par(mfrow = c(1,3))
plot(years, cas2_dq[,"SSB_EN"], xlab = "years", ylab = "SSB (t)", main = "EN", type = "l", lwd = 2, ylim = c(0,200000))
lines(years, cas_dq$EN, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_HG"], xlab = "years", ylab = "SSB (t)", main = "HG", type = "l", lwd = 2, ylim = c(0,150000))
lines(years, cas_dq$HAGU, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_BP"], xlab = "years", ylab = "SSB (t)", main = "BP", type = "l", lwd = 2, ylim = c(0,60000))
lines(years, cas_dq$BOP, lwd = 2, col = "red",lty = 2)
## Read in the IBM output
setwd("../ibm")
library(ibm)
## create Inputs for teh IBM especially the catch ones which such
list.files()
## lets look at B0
cas$quantities$R0
## lets look at B0
cas$quantities$B0
## create Inputs for teh IBM especially the catch ones which such
list.files()
## Read in the IBM output
setwd("../ibm/Layers")
library(ibm)
## create Inputs for teh IBM especially the catch ones which such
list.files()
dir.create("EN_Catch")
dir.create("HG_Catch")
dir.create("BP_Catch")
## create Inputs for teh IBM especially the catch ones which such
list.files()
dir.create("CatchLayers")
cas$quantities$actual_catches$BP_LL,cas2$instantaneous_mort$`1`$
cas2$instantaneous_mort$`1`
catch_mat = matrix(0,nrow = 3,ncol = 1)
setwd("CatchLayers")
i = 1
catch_mat = matrix(0,nrow = 3,ncol = 1)
year = cas2$instantaneous_mort$`1`$year[i]
year
catch_mat[1,] = cas2$instantaneous_mort$`1`$`actual_catch[EN_LL]`
catch_mat[2,] = cas2$instantaneous_mort$`1`$`actual_catch[HG_LL]`
catch_mat[3,] = cas2$instantaneous_mort$`1`$`actual_catch[BP_LL]`
Filename = make.filename(file = paste0(year,"_catch.ibm"), path = getwd())
catch_mat[1,] = cas2$instantaneous_mort$`1`$`actual_catch[EN_LL]`[i]
catch_mat[2,] = cas2$instantaneous_mort$`1`$`actual_catch[HG_LL]`[i]
catch_mat[3,] = cas2$instantaneous_mort$`1`$`actual_catch[BP_LL]`[i]
Filename = make.filename(file = paste0(year,"_catch.ibm"), path = getwd())
catch_mat
create_ibm_layer(label = paste0(year,"_catch"), type = "numeric", filename = Filename)
create_ibm_layer(label = paste0(year,"_catch"), type = "numeric", filename = Filename,catch_mat)
catch_mat = matrix(0,nrow = 3,ncol = 1)
for (i in 1:length(cas2$instantaneous_mort$`1`$year)) {
year = cas2$instantaneous_mort$`1`$year[i]
catch_mat[1,] = cas2$instantaneous_mort$`1`$`actual_catch[EN_LL]`[i]
catch_mat[2,] = cas2$instantaneous_mort$`1`$`actual_catch[HG_LL]`[i]
catch_mat[3,] = cas2$instantaneous_mort$`1`$`actual_catch[BP_LL]`[i]
Filename = make.filename(file = paste0(year,"_catch.ibm"), path = getwd())
create_ibm_layer(label = paste0(year,"_catch"), type = "numeric", filename = Filename,catch_mat)
}
## now add teh include statements in the config.ibm
setwd("..")
list.files()
## now add teh include statements in the config.ibm
setwd("../..")
getwd()
list.files()
setwd("ibm")
list.files()
config = extract.ibm.file("config.ibm");
detach("package:ibm", unload=TRUE)
install.packages("C:/Work/Software/IBM/R-libraries/ibm_0.1.tar.gz", repos = NULL, type = "source")
library(ibm)
ibm = extract.run("output.log")
config = extract.ibm.file("config.ibm");
config
naems(config)
names(config)
i = 1
year = cas2$instantaneous_mort$`1`$year[i]
year
line = paste0('!include "Layers/CatchLayers/catch_',year,'.ibm"')
function (x, y = NULL)
Line = paste0('!include "Layers/CatchLayers/catch_',year,'.ibm"')
Line
Line = paste0('!include "Layers/CatchLayers/catch_',year,'.ibm"')
Line
write(Line,file="config.ibm",append=TRUE)
for (i in 1:length(cas2$instantaneous_mort$`1`$year)) {
year = cas2$instantaneous_mort$`1`$year[i]
Line = paste0('!include "Layers/CatchLayers/catch_',year,'.ibm"')
write(Line,file="config.ibm",append=TRUE)
}
for (i in 1:length(cas2$instantaneous_mort$`1`$year)) {
year = cas2$instantaneous_mort$`1`$year[i]
Line = paste0('!include "Layers/CatchLayers/',year,'_catch.ibm"')
write(Line,file="config.ibm",append=TRUE)
}
1 - 0.078
1 - 0.086
1 - 0.148
1 - 0.36
1 - 0.024
1 - 0.038
0.148 * 0.36
0.148 * 0.36
0.05328 + 0.148
1 - 0.20128
>
1 - 0.20128
> 0.05328
0.148
0.79872
0.078 * 0.038
0.002964 + 0.078
1 - 0.080964
0.086 * 0.024
0.002064 + 9,986
0.002064 + 0.986
0.002064 + 0.086
1 - 0.002064 + 0.086
1 - (0.002064 + 0.086)
getwd()
ibm_30 = extract.run("output_30.log")
ibm_40 = extract.run("output_40.log")
ibm_50 = extract.run("output_50.log")
## look at initial partition
ibm_30$init_2$`1`$values
## look at initial partition
ibm_30$init_2$`1`$values[,-1]
## look at initial partition
ibm_30$init_2$`1`$values[,-1] / rowSums(ibm_30$init_2$`1`$values[,-1])
## look at initial partition
prop_30 = ibm_30$init_2$`1`$values[,-1] / rowSums(ibm_30$init_2$`1`$values[,-1])
rowSums(prop_30)
## look at initial partition
prop_30 = ibm_30$init_2$`1`$values[,-1] / rowSums(ibm_30$init_2$`1`$values[,-1])
prop_40 = ibm_40$init_2$`1`$values[,-1] / rowSums(ibm_40$init_2$`1`$values[,-1])
prop_50 = ibm_50$init_2$`1`$values[,-1] / sowSums(ibm_50$init_2$`1`$values[,-1])
## plot
par(mfrow = c(1,3))
plot(0:30,prop_30[1,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions")
names(cas2)
cas2$Init$`1`$values
en_init = colSums(cas2$Init$`1`$values[1:3,-1])
en_init
en_prop = en_init / rowSums(en_init)
en_prop = en_init / sum(en_init)
en_prop
lines(1:20,en_prop, col = "red", lwd = 2)
ibm_30 = extract.run("output_30.log")
ibm_40 = extract.run("output_40.log")
ibm_50 = extract.run("output_50.log")
## look at initial partition
prop_30 = ibm_30$init_2$`1`$values[,-1] / rowSums(ibm_30$init_2$`1`$values[,-1])
prop_40 = ibm_40$init_2$`1`$values[,-1] / rowSums(ibm_40$init_2$`1`$values[,-1])
prop_50 = ibm_50$init_2$`1`$values[,-1] / rowSums(ibm_50$init_2$`1`$values[,-1])
en_init = colSums(cas2$Init$`1`$values[1:3,-1])
en_prop = en_init / sum(en_init)
## plot
par(mfrow = c(1,3))
plot(0:30,prop_30[1,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions")
lines(1:20,en_prop, col = "red", lwd = 2)
plot(0:20,prop_30[1,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions")
lines(1:20,en_prop, col = "red", lwd = 2)
## plot
par(mfrow = c(1,3))
plot(0:20,prop_30[1,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions")
lines(1:20,en_prop, col = "red", lwd = 2)
plot(0:20,prop_30[2,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions")
lines(1:20,hg_prop, col = "red", lwd = 2)
plot(0:20,prop_30[3,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions")
lines(1:20,bp_prop, col = "red", lwd = 2)
hg_init = colSums(cas2$Init$`1`$values[4:6,-1])
hg_prop = hg_init / sum(hg_init)
bp_init = colSums(cas2$Init$`1`$values[7:9,-1])
bp_prop = bp_init / sum(bp_init)
## plot
par(mfrow = c(1,3))
plot(0:20,prop_30[1,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions")
lines(1:20,en_prop, col = "red", lwd = 2)
plot(0:20,prop_30[2,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions")
lines(1:20,hg_prop, col = "red", lwd = 2)
plot(0:20,prop_30[3,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions")
lines(1:20,bp_prop, col = "red", lwd = 2)
prop_30
bp_prop
hg_prop
en_prop
lines(0:20,prop_30[1,], col = "blue", lwd = 2, lty = 2)
## plot
par(mfrow = c(1,3))
plot(0:20,prop_30[1,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions")
lines(1:20,en_prop, col = "red", lwd = 2)
lines(0:20,prop_40[1,], col = "blue", lwd = 2, lty = 2)
lines(0:20,prop_50[1,], col = "orange", lwd = 2, lty = 2)
plot(0:20,prop_30[2,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions")
lines(1:20,hg_prop, col = "red", lwd = 2)
lines(0:20,prop_40[2,], col = "blue", lwd = 2, lty = 2)
lines(0:20,prop_50[2,], col = "orange", lwd = 2, lty = 2)
plot(0:20,prop_30[3,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions")
lines(1:20,bp_prop, col = "red", lwd = 2)
lines(0:20,prop_40[3,], col = "blue", lwd = 2, lty = 2)
lines(0:20,prop_50[3,], col = "orange", lwd = 2, lty = 2)
## plot
par(mfrow = c(1,3))
plot(0:20,prop_30[1,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(1:20,en_prop, col = "red", lwd = 2)
lines(0:20,prop_40[1,], col = "blue", lwd = 2, lty = 2)
lines(0:20,prop_50[1,], col = "orange", lwd = 2, lty = 2)
plot(0:20,prop_30[2,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(1:20,hg_prop, col = "red", lwd = 2)
lines(0:20,prop_40[2,], col = "blue", lwd = 2, lty = 2)
lines(0:20,prop_50[2,], col = "orange", lwd = 2, lty = 2)
plot(0:20,prop_30[3,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(1:20,bp_prop, col = "red", lwd = 2)
lines(0:20,prop_40[3,], col = "blue", lwd = 2, lty = 2)
lines(0:20,prop_50[3,], col = "orange", lwd = 2, lty = 2)
names(ibm)
ibm_50$model_attributes$`1`
ibm_50$Rec_BP$`1`
ibm_50$derived_quants
ibm_50$Rec_BP$`1`
ibm_50$Rec_HG$`1`
ibm_50$Rec_EN$`1`
32842 + 29301 + 10291
setwd("../Casal2")
library(casal2)
cas2 = extract.mpd("run.log")
cas2_dq = plot.derived_quantities(cas2, report_label = "derived_quants", plot.it = F)
## compare CASAL with Casal2
years = rownames(cas2_dq)
par(mfrow = c(1,3))
plot(years, cas2_dq[,"SSB_EN"], xlab = "years", ylab = "SSB (t)", main = "EN", type = "l", lwd = 2, ylim = c(0,200000))
lines(years, cas_dq$EN, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_HG"], xlab = "years", ylab = "SSB (t)", main = "HG", type = "l", lwd = 2, ylim = c(0,150000))
lines(years, cas_dq$HAGU, lwd = 2, col = "red",lty = 2)
plot(years, cas2_dq[,"SSB_BP"], xlab = "years", ylab = "SSB (t)", main = "BP", type = "l", lwd = 2, ylim = c(0,60000))
lines(years, cas_dq$BOP, lwd = 2, col = "red",lty = 2)
## Read in the IBM output
setwd("../ibm/Layers")
for (i in 1:length(cas2$instantaneous_mort$`1`$year)) {
year = cas2$instantaneous_mort$`1`$year[i]
Line = paste0('!include "Layers/CatchLayers/',year,'_catch.ibm"')
write(Line,file="config.ibm",append=TRUE)
}
## now add teh include statements in the config.ibm
setwd("../..")
ibm_30 = extract.run("output_30.log")
ibm_40 = extract.run("output_40.log")
ibm_50 = extract.run("output_50.log")
## look at initial partition
prop_30 = ibm_30$init_2$`1`$values[,-1] / rowSums(ibm_30$init_2$`1`$values[,-1])
prop_40 = ibm_40$init_2$`1`$values[,-1] / rowSums(ibm_40$init_2$`1`$values[,-1])
getwd()
setwd("ibm")
getwd()
ibm_30 = extract.run("output_30.log")
ibm_40 = extract.run("output_40.log")
ibm_50 = extract.run("output_50.log")
## look at initial partition
prop_30 = ibm_30$init_2$`1`$values[,-1] / rowSums(ibm_30$init_2$`1`$values[,-1])
prop_40 = ibm_40$init_2$`1`$values[,-1] / rowSums(ibm_40$init_2$`1`$values[,-1])
prop_50 = ibm_50$init_2$`1`$values[,-1] / rowSums(ibm_50$init_2$`1`$values[,-1])
en_init = colSums(cas2$Init$`1`$values[1:3,-1])
en_prop = en_init / sum(en_init)
hg_init = colSums(cas2$Init$`1`$values[4:6,-1])
hg_prop = hg_init / sum(hg_init)
bp_init = colSums(cas2$Init$`1`$values[7:9,-1])
bp_prop = bp_init / sum(bp_init)
## plot
par(mfrow = c(1,3))
plot(0:20,prop_30[1,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(1:20,en_prop, col = "red", lwd = 2)
lines(0:20,en_prop, col = "red", lwd = 2)
lines(0:20,prop_40[1,], col = "blue", lwd = 2, lty = 2)
lines(0:20,prop_50[1,], col = "orange", lwd = 2, lty = 2)
prop_50[1,]
prop_30[1,]
en_prop
par(mfrow = c(1,3))
plot(0:20,prop_30[1,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(0:20,en_prop, col = "red", lwd = 2)
lines(0:20,prop_40[1,], col = "blue", lwd = 2, lty = 2)
lines(0:20,prop_50[1,], col = "orange", lwd = 2, lty = 2)
plot(0:20,prop_30[2,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(1:20,hg_prop, col = "red", lwd = 2)
lines(0:20,prop_40[2,], col = "blue", lwd = 2, lty = 2)
lines(0:20,prop_50[2,], col = "orange", lwd = 2, lty = 2)
plot(0:20,prop_30[3,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(1:20,bp_prop, col = "red", lwd = 2)
lines(0:20,prop_40[3,], col = "blue", lwd = 2, lty = 2)
lines(0:20,prop_50[3,], col = "orange", lwd = 2, lty = 2)
## plot
par(mfrow = c(1,3))
plot(0:20,prop_30[1,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(0:20,en_prop, col = "red", lwd = 2)
lines(0:20,prop_40[1,], col = "blue", lwd = 2, lty = 2)
lines(0:20,prop_50[1,], col = "orange", lwd = 2, lty = 2)
plot(0:20,prop_30[2,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(0:20,hg_prop, col = "red", lwd = 2)
lines(0:20,prop_40[2,], col = "blue", lwd = 2, lty = 2)
lines(0:20,prop_50[2,], col = "orange", lwd = 2, lty = 2)
plot(0:20,prop_30[3,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(0:20,bp_prop, col = "red", lwd = 2)
lines(0:20,prop_40[3,], col = "blue", lwd = 2, lty = 2)
lines(0:20,prop_50[3,], col = "orange", lwd = 2, lty = 2)
bp_prop
prop_40[3,]
prop_50
prop_50[3,]
ibm_30 = extract.run("output_80.log")
## look at initial partition
prop_30 = ibm_30$init_2$`1`$values[,-1] / rowSums(ibm_30$init_2$`1`$values[,-1])
en_init = colSums(cas2$Init$`1`$values[1:3,-1])
en_prop = en_init / sum(en_init)
hg_init = colSums(cas2$Init$`1`$values[4:6,-1])
hg_prop = hg_init / sum(hg_init)
bp_init = colSums(cas2$Init$`1`$values[7:9,-1])
bp_prop = bp_init / sum(bp_init)
## plot
par(mfrow = c(1,1))
## plot
par(mfrow = c(1,3))
plot(0:20,prop_30[1,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(0:20,en_prop, col = "red", lwd = 2)
plot(0:20,prop_30[2,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(0:20,hg_prop, col = "red", lwd = 2)
plot(0:20,prop_30[3,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(0:20,bp_prop, col = "red", lwd = 2)
ibm_30 = extract.run("output_100.log")
## look at initial partition
prop_30 = ibm_30$init_2$`1`$values[,-1] / rowSums(ibm_30$init_2$`1`$values[,-1])
## plot
par(mfrow = c(1,3))
plot(0:20,prop_30[1,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(0:20,en_prop, col = "red", lwd = 2)
plot(0:20,prop_30[2,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(0:20,hg_prop, col = "red", lwd = 2)
plot(0:20,prop_30[3,], type = "l", lwd = 2, xlab = "Ages", ylab = "Initial proportions",ylim = c(0,0.26))
lines(0:20,bp_prop, col = "red", lwd = 2)
18448 + 20000
18448 + 20000 + 2000
55000 - 40448
550000
550000 - 18500 - 18000 - 8000 - 3000 - 28000 - 50000
550000*0.2
50000 + 28000 + 8000 + 17000 + 18500
